const MAX_VARIATIONS_PER_FILE = 25000;
const PRICE_FIELDS = ['price', 'regular_price', 'sale_price'];
const PREVIEW_LIMIT = 20;

const state = {
    selectedFiles: [],
    processedData: { parents: [], variations: [] },
    categories: new Map(),
    products: new Map(),
    selectedCategories: new Set(),
    selectedProducts: new Set(),
    statistics: {},
    filteredCategories: [],
    filteredProducts: [],
    activePreviewTab: 'parents'
};

// DOM elements
const elements = {
    uploadSection: document.getElementById('uploadSection'),
    fileInput: document.getElementById('fileInput'),
    fileList: document.getElementById('fileList'),
    processBtn: document.getElementById('processBtn'),
    btnText: document.getElementById('btnText'),
    statusMsg: document.getElementById('statusMsg'),
    exportSection: document.getElementById('exportSection'),
    statsGrid: document.getElementById('statsGrid'),
    categoryList: document.getElementById('categoryList'),
    productList: document.getElementById('productList'),
    categorySearch: document.getElementById('categorySearch'),
    productSearch: document.getElementById('productSearch'),
    categoryCount: document.getElementById('categoryCount'),
    productCount: document.getElementById('productCount'),
    exchangeRateInput: document.getElementById('exchangeRateInput'),
    exportBtn: document.getElementById('exportBtn'),
    previewTable: document.getElementById('previewTable'),
    previewHeader: document.getElementById('previewHeader'),
    previewBody: document.getElementById('previewBody'),
    exportStatus: document.getElementById('exportStatus')
};

// Utility functions
const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 B';
    const k = 1024, sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
};

const timestamp = () => {
    const now = new Date();
    const pad = n => String(n).padStart(2, '0');
    return `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}_${pad(now.getHours())}${pad(now.getMinutes())}`;
};

const showStatus = (message, type = 'info') => {
    elements.statusMsg.innerHTML = `<div class="status ${type}">${message}</div>`;
};

const showExportStatus = (message, type = 'info') => {
    elements.exportStatus.innerHTML = `<div class="status ${type}">${message}</div>`;
};

// Statistics functions
const updateStatistics = () => {
    const stats = state.statistics;
    const selectedParents = getSelectedParents();
    const selectedVariations = getSelectedVariations();
    
    elements.statsGrid.innerHTML = `
        <div class="stat-card">
            <div class="stat-title">Indlæste Parents</div>
            <div class="stat-value">${stats.parents_valid || 0}</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Indlæste Variationer</div>
            <div class="stat-value">${stats.variations_valid || 0}</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Valgte Parents</div>
            <div class="stat-value">${selectedParents.length}</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Valgte Variationer</div>
            <div class="stat-value">${selectedVariations.length}</div>
        </div>
    `;
};

// File handling
const updateFileList = () => {
    if (state.selectedFiles.length === 0) {
        elements.fileList.classList.add('hidden');
        return;
    }
    
    elements.fileList.classList.remove('hidden');
    elements.fileList.innerHTML = state.selectedFiles.map(file => `
        <div class="file-item">
            <svg class="file-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <div class="filter-content">
                <div class="filter-name">${file.name}</div>
                <div class="filter-meta">
                    <span class="meta-tag">${formatFileSize(file.size)}</span>
                </div>
            </div>
        </div>
    `).join('');
};

const handleFiles = (files) => {
    const zipFiles = Array.from(files).filter(file => file.name.toLowerCase().endsWith('.zip'));
    if (zipFiles.length === 0) {
        showStatus('Kun ZIP-filer er understøttet', 'error');
        return;
    }
    
    state.selectedFiles = zipFiles;
    updateFileList();
    elements.processBtn.disabled = false;
    showStatus(`${zipFiles.length} ZIP-fil(er) valgt og klar til behandling`, 'success');
};

// CSV parsing
const parseCSV = (content) => {
    try {
        const result = Papa.parse(content, {
            header: true,
            skipEmptyLines: true,
            delimiter: ',',
            quoteChar: '"',
            escapeChar: '"',
            transform: value => typeof value === 'string' ? value.trim() : value,
            transformHeader: header => header.trim(),
        });
        return result.data.filter(row =>
            Object.values(row).some(value => value && value.toString().trim().length > 0)
        );
    } catch (error) {
        showStatus(`CSV parsing fejl: ${error.message}`, 'error');
        return [];
    }
};

// Main processing
const processZipFiles = async () => {
    try {
        elements.processBtn.disabled = true;
        elements.btnText.textContent = 'Behandler...';
        showStatus('Læser ZIP-filer...', 'info');
        
        state.processedData = { parents: [], variations: [] };
        state.categories.clear();
        state.products.clear();
        
        let totalFiles = 0;
        for (const zipFile of state.selectedFiles) {
            const zip = await JSZip.loadAsync(zipFile);
            for (const [path, file] of Object.entries(zip.files)) {
                if (!path.toLowerCase().endsWith('.csv') || file.dir) continue;
                
                totalFiles++;
                showStatus(`Behandler fil ${totalFiles}: ${path}`, 'info');
                
                let content;
                const uint8Array = await file.async('uint8array');
                try {
                    content = new TextDecoder('utf-8', { fatal: true }).decode(uint8Array);
                } catch (e) {
                    content = new TextDecoder('windows-1252').decode(uint8Array);
                }
                
                const data = parseCSV(content);
                if (data.length === 0) continue;
                
                const isParent = path.toLowerCase().includes('parent') || 
                               data.some(row => !row.parent_sku || row.parent_sku === row.sku);
                
                if (isParent) {
                    state.processedData.parents.push(...data);
                } else {
                    state.processedData.variations.push(...data);
                }
            }
        }
        
        if (!state.processedData.parents.length && !state.processedData.variations.length) {
            throw new Error('Ingen gyldige CSV-data fundet i ZIP-filerne');
        }
        
        await processProductData();
        elements.exportSection.classList.remove('hidden');
        showStatus('Filer behandlet succesfuldt! Vælg produkter/kategorier til eksport.', 'success');
        
    } catch (error) {
        showStatus(`Fejl: ${error.message}`, 'error');
    } finally {
        elements.processBtn.disabled = false;
        elements.btnText.textContent = 'Behandl filer';
    }
};

const processProductData = async () => {
    // Calculate statistics
    state.statistics = {
        parents_total: state.processedData.parents.length,
        variations_total: state.processedData.variations.length,
    };

    // Filter variations to only include those with valid parent SKUs
    const parentSkuSet = new Set(state.processedData.parents.map(p => p.sku?.trim()).filter(Boolean));
    const origVariations = state.processedData.variations.length;
    state.processedData.variations = state.processedData.variations.filter(v => 
        parentSkuSet.has(v.parent_sku?.trim())
    );
    
    state.statistics.variations_discarded = origVariations - state.processedData.variations.length;
    state.statistics.parents_valid = state.processedData.parents.length;
    state.statistics.variations_valid = state.processedData.variations.length;

    // Process categories
    const categoryData = new Map();
    state.processedData.parents.forEach(p => {
        const catName = (p['tax:product_cat'] || 'Ukategoriseret').trim();
        if (!categoryData.has(catName)) {
            categoryData.set(catName, { name: catName, products: [] });
        }
        categoryData.get(catName).products.push(p);
    });
    state.categories = categoryData;

    // Process products
    state.processedData.parents.forEach(p => {
        const sku = p.sku?.trim();
        if (sku) {
            state.products.set(sku, {
                sku: sku,
                name: p.name && p.name.trim() ? p.name.trim() : sku,
                category: p['tax:product_cat'] || 'Ukategoriseret',
                price: p.regular_price || p.price || '0',
                status: p.status || 'publish'
            });
        }
    });

    renderFilters();
    updateStatistics();
    updatePreview();
};

// Selection functions
const getSelectedParents = () => {
    if (state.selectedCategories.size > 0) {
        const selectedCats = Array.from(state.selectedCategories);
        return state.processedData.parents.filter(p => 
            selectedCats.includes(p['tax:product_cat'] || 'Ukategoriseret')
        );
    }
    
    if (state.selectedProducts.size > 0) {
        return state.processedData.parents.filter(p => 
            state.selectedProducts.has(p.sku)
        );
    }
    
    return [];
};

const getSelectedVariations = () => {
    const selectedParents = getSelectedParents();
    const parentSkus = new Set(selectedParents.map(p => p.sku));
    return state.processedData.variations.filter(v => parentSkus.has(v.parent_sku));
};

// Filtering
const renderFilters = () => {
    // Kategorier
    state.filteredCategories = Array.from(state.categories.values());
    elements.categoryList.innerHTML = state.filteredCategories.map(cat =>
        `<div class="filter-item${state.selectedCategories.has(cat.name) ? ' selected' : ''}" data-category="${cat.name}">
            <input type="checkbox" class="filter-checkbox" ${state.selectedCategories.has(cat.name) ? 'checked' : ''}>
            <div class="filter-content">
                <div class="filter-name">${cat.name}</div>
                <div class="filter-meta">
                    <span class="meta-tag">${cat.products.length} produkter</span>
                </div>
            </div>
        </div>`
    ).join('');
    elements.categoryCount.textContent = `${state.selectedCategories.size} valgt`;

    // Produkter
    let productArray = Array.from(state.products.values());
    state.filteredProducts = productArray;
    elements.productList.innerHTML = productArray.map(prod =>
        `<div class="filter-item${state.selectedProducts.has(prod.sku) ? ' selected' : ''}" data-sku="${prod.sku}">
            <input type="checkbox" class="filter-checkbox" ${state.selectedProducts.has(prod.sku) ? 'checked' : ''}>
            <div class="filter-content">
                <div class="filter-name">${prod.name}</div>
                <div class="filter-meta">
                    <span class="meta-tag">${prod.sku}</span>
                    <span class="meta-tag">${prod.category}</span>
                    <span class="meta-tag">DKK ${(+prod.price).toFixed(2)}</span>
                </div>
            </div>
        </div>`
    ).join('');
    elements.productCount.textContent = `${state.selectedProducts.size} valgt`;

    updateStatistics();
    updatePreview();
};

// Preview
const updatePreview = () => {
    const tab = state.activePreviewTab;
    const data = tab === 'parents' ? getSelectedParents() : getSelectedVariations();
    if (!data.length) {
        elements.previewHeader.innerHTML = '';
        elements.previewBody.innerHTML = '<tr><td colspan="10" style="text-align:center">Ingen data til forhåndsvisning</td></tr>';
        return;
    }
    const columns = Object.keys(data[0]);
    elements.previewHeader.innerHTML = '<tr>' + columns.map(h => `<th>${h}</th>`).join('') + '</tr>';
    elements.previewBody.innerHTML = data.slice(0, PREVIEW_LIMIT).map(row =>
        '<tr>' + columns.map(h => `<td>${(row[h] ?? '')}</td>`).join('') + '</tr>'
    ).join('');
};

// Event Handlers
const initEventHandlers = () => {
    // Search
    elements.categorySearch.addEventListener('input', e => {
        const val = e.target.value.toLowerCase();
        state.filteredCategories = Array.from(state.categories.values()).filter(cat =>
            cat.name.toLowerCase().includes(val)
        );
        renderFilters();
    });

    elements.productSearch.addEventListener('input', e => {
        const val = e.target.value.toLowerCase();
        state.filteredProducts = Array.from(state.products.values()).filter(prod =>
            prod.name.toLowerCase().includes(val) || prod.sku.toLowerCase().includes(val)
        );
        renderFilters();
    });

    // Bulk actions
    document.getElementById('selectAllCategories').onclick = () => {
        state.selectedCategories = new Set(Array.from(state.categories.keys()));
        renderFilters();
    };

    document.getElementById('clearAllCategories').onclick = () => {
        state.selectedCategories.clear();
        renderFilters();
    };

    document.getElementById('selectAllProducts').onclick = () => {
        state.selectedProducts = new Set(Array.from(state.products.keys()));
        renderFilters();
    };

    document.getElementById('clearAllProducts').onclick = () => {
        state.selectedProducts.clear();
        renderFilters();
    };

    // Filter selection (event delegation)
    elements.categoryList.onclick = e => {
        let el = e.target.closest('.filter-item');
        if (!el) return;
        const cat = el.dataset.category;
        if (state.selectedCategories.has(cat)) state.selectedCategories.delete(cat);
        else state.selectedCategories.add(cat);
        // Når man vælger kategori, nulstilles produktvalg
        state.selectedProducts.clear();
        renderFilters();
    };

    elements.productList.onclick = e => {
        let el = e.target.closest('.filter-item');
        if (!el) return;
        const sku = el.dataset.sku;
        if (state.selectedProducts.has(sku)) state.selectedProducts.delete(sku);
        else state.selectedProducts.add(sku);
        // Når man vælger produkter, nulstilles kategori-valg
        state.selectedCategories.clear();
        renderFilters();
    };

    // Tabs
    document.querySelectorAll('.preview-tab').forEach(tabBtn => {
        tabBtn.onclick = e => {
            document.querySelectorAll('.preview-tab').forEach(btn => btn.classList.remove('active'));
            tabBtn.classList.add('active');
            state.activePreviewTab = tabBtn.dataset.tab;
            updatePreview();
        };
    });

    // Upload handlers
    elements.uploadSection.ondragover = e => {
        e.preventDefault();
        elements.uploadSection.classList.add('dragover');
    };

    elements.uploadSection.ondragleave = e => {
        elements.uploadSection.classList.remove('dragover');
    };

    elements.uploadSection.ondrop = e => {
        e.preventDefault();
        elements.uploadSection.classList.remove('dragover');
        handleFiles(e.dataTransfer.files);
    };

    elements.fileInput.onchange = e => handleFiles(e.target.files);

    // Button handlers
    elements.processBtn.onclick = processZipFiles;
    elements.exchangeRateInput.oninput = updatePreview;

    elements.exportBtn.onclick = async () => {
        const rate = parseFloat(elements.exchangeRateInput.value.replace(',', '.'));
        if (!rate || rate <= 0) {
            showExportStatus('Ugyldig valutakurs', 'error');
            return;
        }

        const parents = getSelectedParents();
        const variations = getSelectedVariations();

        const convertPrice = val => {
            let num = parseFloat(val?.replace(',', '.') || '0');
            return isNaN(num) ? '' : (num * rate).toFixed(2).replace('.', ',');
        };

        const filesToZip = [];
        const addCSVFile = (rows, filename) => {
            if (!rows.length) return;
            const fields = Object.keys(rows[0]);
            const data = rows.map(row => {
                let r = { ...row };
                PRICE_FIELDS.forEach(f => { if (f in r) r[f] = convertPrice(r[f]); });
                return r;
            });
            const csv = Papa.unparse(data, { columns: fields, delimiter: ',' });
            filesToZip.push({ filename, content: csv });
        };

        if (state.selectedCategories.size) {
            state.selectedCategories.forEach(catName => {
                const p = parents.filter(p => (p['tax:product_cat'] || 'Ukategoriseret') === catName);
                if (p.length) addCSVFile(p, `parents-${catName}-${timestamp()}.csv`);
                const v = variations.filter(v => {
                    const par = state.processedData.parents.find(par => par.sku === v.parent_sku);
                    return par && (par['tax:product_cat'] || 'Ukategoriseret') === catName;
                });
                if (v.length) addCSVFile(v, `variations-${catName}-${timestamp()}.csv`);
            });
        } else {
            if (parents.length) addCSVFile(parents, `custom-export-parents-${timestamp()}.csv`);
            if (variations.length) addCSVFile(variations, `custom-export-variations-${timestamp()}.csv`);
        }

        if (!filesToZip.length) {
            showExportStatus('Ingen data til eksport', 'warning');
            return;
        }

        showExportStatus('Genererer ZIP-fil, vent...', 'info');
        const zip = new JSZip();
        filesToZip.forEach(f => zip.file(f.filename, f.content));
        const blob = await zip.generateAsync({ type: 'blob' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = `woocommerce-export-${timestamp()}.zip`;
        a.click();
        showExportStatus('ZIP-fil klar til download', 'success');
    };
};

// Initialize the application
const init = () => {
    showStatus('Upload én eller flere ZIP-filer med WooCommerce CSV-data', 'info');
    initEventHandlers();
};

// Start the application when the DOM is ready
document.addEventListener('DOMContentLoaded', init);

<!DOCTYPE html>
<html lang="da">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZIP File Processor - WooCommerce</title>
    <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            color: #333;
        }

        .container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .main-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 800px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
            font-weight: 400;
        }

        .upload-section {
            margin-bottom: 30px;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input {
            position: absolute;
            left: -9999px;
            opacity: 0;
        }

        .file-input-label {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            padding: 20px;
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            border: 2px dashed #cbd5e1;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            color: #64748b;
        }

        .file-input-label:hover {
            background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .file-input-label.has-file {
            background: linear-gradient(135deg, #ecfdf5, #d1fae5);
            border-color: #10b981;
            color: #059669;
        }

        .upload-icon {
            width: 24px;
            height: 24px;
        }

        .process-btn {
            width: 100%;
            padding: 16px 32px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .process-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }

        .process-btn:active {
            transform: translateY(0);
        }

        .process-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .output {
            margin-top: 30px;
        }

        .status-message {
            padding: 16px;
            border-radius: 12px;
            margin-bottom: 20px;
            font-weight: 500;
            text-align: center;
        }

        .status-message.loading {
            background: linear-gradient(135deg, #fef3c7, #fde68a);
            color: #92400e;
            border: 1px solid #f59e0b;
        }

        .status-message.success {
            background: linear-gradient(135deg, #dcfce7, #bbf7d0);
            color: #166534;
            border: 1px solid #22c55e;
        }

        .status-message.error {
            background: linear-gradient(135deg, #fee2e2, #fecaca);
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        .files-section {
            margin-top: 20px;
        }

        .files-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .files-header h3 {
            color: #334155;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .clear-all-btn {
            padding: 8px 16px;
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .clear-all-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

        .files-grid {
            display: grid;
            gap: 12px;
        }

        .file-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 16px;
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            border-radius: 12px;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }

        .file-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            border-color: #667eea;
        }

        .file-item.editing {
            border-color: #f59e0b;
            background: linear-gradient(135deg, #fef3c7, #fde68a);
        }

        .file-icon {
            width: 20px;
            height: 20px;
            color: #667eea;
            flex-shrink: 0;
        }

        .file-content {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .file-link {
            text-decoration: none;
            color: #334155;
            font-weight: 500;
            flex: 1;
            transition: color 0.3s ease;
            word-break: break-all;
        }

        .file-link:hover {
            color: #667eea;
        }

        .file-name-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #cbd5e1;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 500;
            background: white;
        }

        .file-name-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .file-actions {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .edit-btn {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .edit-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
        }

        .save-btn {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .save-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
        }

        .cancel-btn {
            background: linear-gradient(135deg, #6b7280, #4b5563);
            color: white;
        }

        .cancel-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(107, 114, 128, 0.4);
        }

        .delete-btn {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .delete-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

        .download-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .download-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .action-icon {
            width: 16px;
            height: 16px;
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #e2e8f0;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            padding: 20px;
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #64748b;
        }

        .empty-state svg {
            width: 48px;
            height: 48px;
            margin-bottom: 16px;
            color: #cbd5e1;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-card">
            <div class="header">
                <h1>ZIP Processor</h1>
                <p>Upload en ZIP-fil med CSV-filer til WooCommerce behandling</p>
            </div>

            <div class="upload-section">
                <div class="file-input-wrapper">
                    <input type="file" id="zipFileInput" accept=".zip" class="file-input">
                    <label for="zipFileInput" class="file-input-label" id="fileLabel">
                        <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        <span id="labelText">Vælg ZIP-fil eller træk og slip her</span>
                    </label>
                </div>
            </div>

            <button id="processButton" class="process-btn">
                <span id="buttonText">Behandl Fil</span>
            </button>

            <div id="output" class="output"></div>
        </div>
    </div>

    <div class="footer">
        <p>Udviklet til WooCommerce CSV behandling</p>
    </div>

    <script>
        const fileInput = document.getElementById('zipFileInput');
        const fileLabel = document.getElementById('fileLabel');
        const labelText = document.getElementById('labelText');
        const processButton = document.getElementById('processButton');
        const buttonText = document.getElementById('buttonText');
        const output = document.getElementById('output');

        // Store processed files in memory
        let processedFiles = [];

        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                fileLabel.classList.add('has-file');
                labelText.textContent = `Valgt: ${file.name}`;
            } else {
                fileLabel.classList.remove('has-file');
                labelText.textContent = 'Vælg ZIP-fil eller træk og slip her';
            }
        });

        processButton.addEventListener('click', async () => {
            if (!fileInput.files.length) {
                showMessage('Vælg venligst en ZIP-fil.', 'error');
                return;
            }

            const zipFile = fileInput.files[0];
            if (!zipFile.name.endsWith('.zip')) {
                showMessage('Den valgte fil er ikke en ZIP-fil.', 'error');
                return;
            }

            try {
                setLoading(true);
                showMessage('Behandler fil, vent venligst...', 'loading');
                
                const zip = await JSZip.loadAsync(zipFile);
                const newFiles = [];

                for (const [fileName, file] of Object.entries(zip.files)) {
                    if (fileName.endsWith('.csv')) {
                        const content = await file.async('uint8array');
                        const decoder = new TextDecoder('windows-1252');
                        const csvText = decoder.decode(content);

                        if (zipFile.name === 'wordpressdatafullvariations.zip') {
                            const parts = splitAndSaveCSV(csvText, fileName);
                            newFiles.push(...parts);
                        } else {
                            const processedFile = saveAsUTF8WithBOM(csvText, fileName);
                            newFiles.push(processedFile);
                        }
                    }
                }

                // Add new files to the collection
                processedFiles.push(...newFiles);
                
                setLoading(false);
                showMessage(`Behandling fuldført! ${newFiles.length} nye filer genereret.`, 'success');
                displayFiles();

            } catch (error) {
                console.error('Fejl ved behandling af ZIP-fil:', error);
                setLoading(false);
                showMessage('Der opstod en fejl under behandling af filen.', 'error');
            }
        });

        function setLoading(loading) {
            processButton.disabled = loading;
            if (loading) {
                buttonText.innerHTML = '<div class="loading-spinner"></div>';
            } else {
                buttonText.textContent = 'Behandl Fil';
            }
        }

        function showMessage(message, type) {
            const existingMessage = output.querySelector('.status-message');
            if (existingMessage) {
                existingMessage.remove();
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `status-message ${type}`;
            messageDiv.textContent = message;
            output.insertBefore(messageDiv, output.firstChild);
        }

        function displayFiles() {
            // Remove existing files section
            const existingSection = output.querySelector('.files-section');
            if (existingSection) {
                existingSection.remove();
            }

            if (processedFiles.length === 0) {
                return;
            }

            const filesSection = document.createElement('div');
            filesSection.className = 'files-section';

            const filesHeader = document.createElement('div');
            filesHeader.className = 'files-header';
            filesHeader.innerHTML = `
                <h3>Behandlede Filer (${processedFiles.length})</h3>
                <button class="clear-all-btn" onclick="clearAllFiles()">Ryd Alle</button>
            `;

            const filesGrid = document.createElement('div');
            filesGrid.className = 'files-grid';

            processedFiles.forEach((file, index) => {
                const fileItem = createFileItem(file, index);
                filesGrid.appendChild(fileItem);
            });

            filesSection.appendChild(filesHeader);
            filesSection.appendChild(filesGrid);
            output.appendChild(filesSection);
        }

        function createFileItem(file, index) {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.dataset.index = index;

            fileItem.innerHTML = `
                <svg class="file-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <div class="file-content">
                    <span class="file-link">${file.name}</span>
                </div>
                <div class="file-actions">
                    <button class="action-btn edit-btn" title="Rediger filnavn" onclick="editFileName(${index})">
                        <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                    </button>
                    <button class="action-btn download-btn" title="Download fil" onclick="downloadFile(${index})">
                        <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                        </svg>
                    </button>
                    <button class="action-btn delete-btn" title="Slet fil" onclick="deleteFile(${index})">
                        <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                </div>
            `;

            return fileItem;
        }

        function editFileName(index) {
            const fileItem = document.querySelector(`[data-index="${index}"]`);
            const fileContent = fileItem.querySelector('.file-content');
            const currentName = processedFiles[index].name;

            fileItem.classList.add('editing');
            
            fileContent.innerHTML = `
                <input type="text" class="file-name-input" value="${currentName}" id="input-${index}">
            `;

            const actions = fileItem.querySelector('.file-actions');
            actions.innerHTML = `
                <button class="action-btn save-btn" title="Gem ændringer" onclick="saveFileName(${index})">
                    <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                </button>
                <button class="action-btn cancel-btn" title="Annuller" onclick="cancelEdit(${index})">
                    <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            `;

            document.getElementById(`input-${index}`).focus();
        }

        function saveFileName(index) {
            const input = document.getElementById(`input-${index}`);
            const newName = input.value.trim();

            if (!newName) {
                alert('Filnavnet kan ikke være tomt.');
                return;
            }

            if (!newName.endsWith('.csv')) {
                alert('Filnavnet skal ende med .csv');
                return;
            }

            // Update the file name
            processedFiles[index].name = newName;
            
            // Update the blob URL with new filename
            updateFileBlob(index);
            
            // Refresh the display
            displayFiles();
            
            showMessage('Filnavn opdateret!', 'success');
        }

        function cancelEdit(index) {
            displayFiles();
        }

        function updateFileBlob(index) {
            const file = processedFiles[index];
            // The URL stays the same, only the download name changes
            // This is handled by the download attribute in the link
        }

        function downloadFile(index) {
            const file = processedFiles[index];
            const link = document.createElement('a');
            link.href = file.url;
            link.download = file.name;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function deleteFile(index) {
            if (confirm(`Er du sikker på at du vil slette "${processedFiles[index].name}"?`)) {
                // Revoke the object URL to free memory
                URL.revokeObjectURL(processedFiles[index].url);
                
                // Remove from array
                processedFiles.splice(index, 1);
                
                // Refresh display
                displayFiles();
                
                showMessage('Fil slettet!', 'success');
            }
        }

        function clearAllFiles() {
            if (processedFiles.length === 0) return;
            
            if (confirm(`Er du sikker på at du vil slette alle ${processedFiles.length} filer?`)) {
                // Revoke all object URLs
                processedFiles.forEach(file => {
                    URL.revokeObjectURL(file.url);
                });
                
                // Clear array
                processedFiles = [];
                
                // Refresh display
                displayFiles();
                
                showMessage('Alle filer slettet!', 'success');
            }
        }

        function saveAsUTF8WithBOM(csvText, fileName) {
            const encoder = new TextEncoder('utf-8');
            const bom = new Uint8Array([0xEF, 0xBB, 0xBF]);
            const utf8Bytes = encoder.encode(csvText);
            const blob = new Blob([bom, utf8Bytes], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);

            const now = new Date();
            const dateTime = `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}_${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}${String(now.getSeconds()).padStart(2, '0')}`;
            const baseFileName = fileName.replace('.csv', '');
            const processedFileName = `${dateTime}_${baseFileName}.csv`;

            return { name: processedFileName, url };
        }

        function splitAndSaveCSV(csvText, fileName) {
            const lines = csvText.split('\n');
            const header = lines.shift();
            const maxLines = 25000;
            let part = 1;
            const processedFiles = [];

            const now = new Date();
            const dateTime = `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}_${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}${String(now.getSeconds()).padStart(2, '0')}`;
            const baseFileName = fileName.replace('.csv', '');

            while (lines.length > 0) {
                const chunk = lines.splice(0, maxLines);
                chunk.unshift(header);
                const chunkText = chunk.join('\n');
                
                const chunkFileName = `${dateTime}_${baseFileName}_part${part}.csv`;
                const file = createFileFromText(chunkText, chunkFileName);
                processedFiles.push(file);
                part++;
            }

            return processedFiles;
        }

        function createFileFromText(text, fileName) {
            const encoder = new TextEncoder('utf-8');
            const bom = new Uint8Array([0xEF, 0xBB, 0xBF]);
            const utf8Bytes = encoder.encode(text);
            const blob = new Blob([bom, utf8Bytes], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);

            return { name: fileName, url };
        }
    </script>
</body>
</html>
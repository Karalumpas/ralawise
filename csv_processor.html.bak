<!DOCTYPE html>
<html lang="da">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WooCommerce ZIP → CSV Advanced Exporter</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * { box-sizing: border-box; }

    body {
      min-height: 100vh;
      margin: 0;
      background: linear-gradient(135deg, #667eea, #764ba2);
      padding: 20px;
      color: #334155;
      font-family: 'Inter', sans-serif;
      line-height: 1.6;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      background: rgba(255,255,255,.96);
      border-radius: 16px;
      box-shadow: 0 25px 50px rgba(0,0,0,.15);
      overflow: hidden;
    }

    /* Header Styles */
    .header {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 2rem;
      text-align: center;
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin: 0 0 0.5rem;
    }

    .header p {
      font-size: 1.1rem;
      opacity: 0.9;
      margin: 0;
    }

    /* Main Content */
    .main-content {
      padding: 2rem;
      display: grid;
      gap: 2rem;
    }

        /* 1) Tillad grid-items at krympe: */
    .export-section > .filter-panel,
    .controls-section {
    min-width: 0;
    }

    /* 2) Sørg for horisontal scroll på preview */
    .preview-table-container {
    width: 100%;
    max-width: 100%;     /* undgå at vokse ud over forælder */
    min-width: 0;        /* så overflow-x virker */
    overflow-x: auto;    /* scroll ved for bredt indhold */
    }

    /* 3) (valgfrit) wrap hele preview-sektionen i scroll */
    .preview-section {
    overflow-x: auto;
    padding-bottom: 1rem; /* undgå at scrollbar overlapper kant */
    }


    /* Upload Section */
    .upload-section {
      border: 3px dashed #cbd5e1;
      border-radius: 12px;
      background: #f8fafc;
      padding: 3rem 2rem;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
    }

    .upload-section:hover {
      border-color: #667eea;
      background: #f1f5f9;
    }

    .upload-section.dragover {
      border-color: #667eea;
      background: #e0f2fe;
      transform: scale(1.02);
    }

    .upload-section input {
      position: absolute;
      inset: 0;
      opacity: 0;
      cursor: pointer;
    }

    .upload-icon {
      width: 64px;
      height: 64px;
      margin: 0 auto 1rem;
      stroke: #94a3b8;
      transition: 0.3s;
    }

    .upload-section:hover .upload-icon {
      stroke: #667eea;
      transform: scale(1.1);
    }

    .upload-text {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: #334155;
    }

    .upload-hint {
      color: #64748b;
      font-size: 1rem;
    }

    /* File List */
    .file-list {
      background: #f8fafc;
      border-radius: 12px;
      padding: 1rem;
      margin-top: 1rem;
    }

    .file-item {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem;
      background: white;
      border-radius: 8px;
      margin-bottom: 0.5rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .file-item:last-child { margin-bottom: 0; }

    .file-icon {
      width: 24px;
      height: 24px;
      stroke: #64748b;
    }

    /* Filter content */
    .filter-content {
      flex: 1;
    }

    .filter-name {
      font-weight: 500;
      color: #334155;
      margin-bottom: 0.25rem;
    }

    .filter-meta {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .meta-tag {
      background: #e2e8f0;
      color: #64748b;
      padding: 0.125rem 0.5rem;
      border-radius: 12px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    /* Buttons */
    .btn {
      padding: 1rem 2rem;
      border: none;
      border-radius: 12px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.25s;
      font-size: 1rem;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      min-width: 140px;
    }

    .btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .bulk-btn {
      padding: 0.5rem 1rem;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      background: white;
      color: #64748b;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
    }

    .bulk-btn:hover {
      background: #f8fafc;
      border-color: #cbd5e1;
    }

    .bulk-actions {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    /* Stats */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      margin: 1rem 0;
    }

    .stat-card {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      border-left: 4px solid #667eea;
    }

    .stat-title {
      font-size: 0.875rem;
      font-weight: 600;
      color: #64748b;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 0.5rem;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: #334155;
    }

    /* Export Section */
    .export-section {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }

    /* Controls Section */
    .controls-section {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      margin-top: 1rem;
    }

    .controls-grid {
      display: grid;
      grid-template-columns: auto 1fr auto;
      gap: 1rem;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .rate-label {
      font-weight: 500;
      color: #334155;
    }

    .rate-input {
      padding: 0.75rem 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.2s;
    }

    .rate-input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    /* Filter Panel */
    .filter-panel {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      max-height: 600px;
      overflow-y: auto;
    }

    .filter-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1rem;
      position: sticky;
      top: 0;
      background: white;
      z-index: 1;
      padding: 0.5rem 0;
    }

    .filter-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: #334155;
    }

    .filter-count {
      background: #e0f2fe;
      color: #0369a1;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.875rem;
      font-weight: 500;
    }

    /* Search Box */
    .search-box {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 1rem;
      margin-bottom: 1rem;
      transition: border-color 0.2s;
    }

    .search-box:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    /* Filter List */
    .filter-list {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      background: #f8fafc;
      max-height: 400px;
      overflow-y: auto;
    }

    .filter-item {
      display: flex;
      align-items: flex-start;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #e2e8f0;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .filter-item:last-child {
      border-bottom: none;
    }

    .filter-item:hover {
      background: #f1f5f9;
    }

    .filter-item.selected {
      background: #e0f2fe;
      border-color: #7dd3fc;
    }

    .filter-checkbox {
      margin: 0;
      width: 16px;
      height: 16px;
      cursor: pointer;
    }

    /* Preview Section */
    .preview-section {
      margin-top: 2rem;
    }

    .preview-tabs {
      display: flex;
      border-bottom: 2px solid #e2e8f0;
      margin-bottom: 1rem;
    }

    .preview-tab {
      padding: 0.75rem 1.5rem;
      background: none;
      border: none;
      cursor: pointer;
      font-weight: 500;
      color: #64748b;
      border-bottom: 2px solid transparent;
      transition: all 0.2s;
    }

    .preview-tab.active {
      color: #667eea;
      border-bottom-color: #667eea;
    }

    .preview-table-container {
      max-height: 400px;
      overflow: auto;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
    }

    .preview-table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.875rem;
    }

    .preview-table th {
      background: #f8fafc;
      padding: 0.75rem;
      text-align: left;
      font-weight: 600;
      color: #334155;
      border-bottom: 2px solid #e2e8f0;
      position: sticky;
      top: 0;
      z-index: 1;
    }

    .preview-table td {
      padding: 0.5rem 0.75rem;
      border-bottom: 1px solid #f1f5f9;
      max-width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .preview-table tbody tr:hover {
      background: #f8fafc;
    }

    /* Status Messages */
    .status {
      padding: 1rem;
      border-radius: 8px;
      font-weight: 500;
      margin: 1rem 0;
    }

    .status.success { 
      background: #dcfce7; 
      color: #166534; 
      border: 1px solid #bbf7d0; 
    }

    .status.warning { 
      background: #fef3c7; 
      color: #92400e; 
      border: 1px solid #fde68a; 
    }

    .status.error { 
      background: #fee2e2; 
      color: #991b1b; 
      border: 1px solid #fecaca; 
    }

    .status.info { 
      background: #dbeafe; 
      color: #1e40af; 
      border: 1px solid #bfdbfe; 
    }

    /* Loading spinner */
    .spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #ffffff;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Utility Classes */
    .hidden { display: none !important; }

    /* Responsive Design */
    @media (max-width: 768px) {
      .export-section {
        grid-template-columns: 1fr;
      }
      
      .controls-grid {
        grid-template-columns: 1fr;
        text-align: center;
      }
      
      .rate-input {
        width: 100%;
      }

      .header h1 {
        font-size: 2rem;
      }

      .stats-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }

      .bulk-actions {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>WooCommerce Advanced Exporter</h1>
      <p>Upload ZIP-filer med produktdata og eksporter tilpassede CSV-filer med live preview og smart filtrering</p>
    </div>
    
    <div class="main-content">
      <div class="upload-section" id="uploadSection">
        <input type="file" id="fileInput" accept=".zip" multiple>
        <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6H16a5 5 0 011 9.9M13 11l-3-3m0 0l-3 3m3-3v12"></path>
        </svg>
        <div class="upload-text">Vælg eller træk ZIP-filer hertil</div>
        <div class="upload-hint">Understøtter flere filer ad gangen</div>
      </div>
      
      <div class="file-list hidden" id="fileList"></div>
      
      <button class="btn" id="processBtn" disabled>
        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        <span id="btnText">Behandl filer</span>
      </button>
      
      <div id="statusMsg"></div>
      
      <div id="exportSection" class="hidden">
        <div class="stats-grid" id="statsGrid"></div>
        
        <div class="export-section">
          <div class="filter-panel">
            <div class="filter-header">
              <h3 class="filter-title">Kategorier</h3>
              <span class="filter-count" id="categoryCount">0 valgt</span>
            </div>
            <div class="bulk-actions">
              <button class="bulk-btn" id="selectAllCategories">Vælg alle</button>
              <button class="bulk-btn" id="clearAllCategories">Ryd alle</button>
            </div>
            <input type="text" class="search-box" id="categorySearch" placeholder="Søg kategorier...">
            <div class="filter-list" id="categoryList"></div>
          </div>
          
          <div class="filter-panel">
            <div class="filter-header">
              <h3 class="filter-title">Produkter</h3>
              <span class="filter-count" id="productCount">0 valgt</span>
            </div>
            <div class="bulk-actions">
              <button class="bulk-btn" id="selectAllProducts">Vælg alle</button>
              <button class="bulk-btn" id="clearAllProducts">Ryd alle</button>
            </div>
            <input type="text" class="search-box" id="productSearch" placeholder="Søg produkter (navn eller SKU)...">
            <div class="filter-list" id="productList"></div>
          </div>
        </div>
        
        <div class="controls-section">
          <div class="controls-grid">
            <label class="rate-label" for="exchangeRateInput">Valutakurs (£ → DKK):</label>
            <input type="number" class="rate-input" id="exchangeRateInput" value="8.80" step="0.01" min="0.01">
            <button class="btn" id="exportBtn">
              <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
              </svg>
              Eksporter CSV
            </button>
          </div>
          
          <div class="preview-section">
            <div class="preview-tabs">
              <button class="preview-tab active" data-tab="parents">Parents Preview</button>
              <button class="preview-tab" data-tab="variations">Variations Preview</button>
            </div>
            <div class="preview-table-container">
              <table class="preview-table" id="previewTable">
                <thead id="previewHeader"></thead>
                <tbody id="previewBody"></tbody>
              </table>
            </div>
          </div>
        </div>
        
        <div id="exportStatus"></div>
      </div>
    </div>
  </div>

  <script>
    const MAX_VARIATIONS_PER_FILE = 25000;
    const PRICE_FIELDS = ['price', 'regular_price', 'sale_price'];
    const PREVIEW_LIMIT = 20;

    const state = {
        selectedFiles: [],
        processedData: { parents: [], variations: [] },
        categories: new Map(),
        products: new Map(),
        selectedCategories: new Set(),
        selectedProducts: new Set(),
        statistics: {},
        filteredCategories: [],
        filteredProducts: [],
        activePreviewTab: 'parents'
    };

    // DOM elements
    const elements = {
        uploadSection: document.getElementById('uploadSection'),
        fileInput: document.getElementById('fileInput'),
        fileList: document.getElementById('fileList'),
        processBtn: document.getElementById('processBtn'),
        btnText: document.getElementById('btnText'),
        statusMsg: document.getElementById('statusMsg'),
        exportSection: document.getElementById('exportSection'),
        statsGrid: document.getElementById('statsGrid'),
        categoryList: document.getElementById('categoryList'),
        productList: document.getElementById('productList'),
        categorySearch: document.getElementById('categorySearch'),
        productSearch: document.getElementById('productSearch'),
        categoryCount: document.getElementById('categoryCount'),
        productCount: document.getElementById('productCount'),
        exchangeRateInput: document.getElementById('exchangeRateInput'),
        exportBtn: document.getElementById('exportBtn'),
        previewTable: document.getElementById('previewTable'),
        previewHeader: document.getElementById('previewHeader'),
        previewBody: document.getElementById('previewBody'),
        exportStatus: document.getElementById('exportStatus')
    };

    // Utility functions
    const formatFileSize = (bytes) => {
        if (bytes === 0) return '0 B';
        const k = 1024, sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    };

    const timestamp = () => {
        const now = new Date();
        const pad = n => String(n).padStart(2, '0');
        return `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}_${pad(now.getHours())}${pad(now.getMinutes())}`;
    };

    const showStatus = (message, type = 'info') => {
        elements.statusMsg.innerHTML = `<div class="status ${type}">${message}</div>`;
    };

    const showExportStatus = (message, type = 'info') => {
        elements.exportStatus.innerHTML = `<div class="status ${type}">${message}</div>`;
    };

    const setButtonLoading = (button, loading) => {
        const textEl = button.querySelector('span') || button;
        const svg = button.querySelector('svg');
        
        if (loading) {
            button.disabled = true;
            if (svg) svg.style.display = 'none';
            textEl.innerHTML = '<div class="spinner"></div> Behandler...';
        } else {
            button.disabled = false;
            if (svg) svg.style.display = 'block';
            textEl.textContent = 'Behandl filer';
        }
    };

    // Statistics functions
    const updateStatistics = () => {
        const stats = state.statistics;
        const selectedParents = getSelectedParents();
        const selectedVariations = getSelectedVariations();
        
        elements.statsGrid.innerHTML = `
            <div class="stat-card">
                <div class="stat-title">Indlæste Parents</div>
                <div class="stat-value">${stats.parents_valid || 0}</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Indlæste Variationer</div>
                <div class="stat-value">${stats.variations_valid || 0}</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Valgte Parents</div>
                <div class="stat-value">${selectedParents.length}</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Valgte Variationer</div>
                <div class="stat-value">${selectedVariations.length}</div>
            </div>
        `;
    };

    // File handling
    const updateFileList = () => {
        if (state.selectedFiles.length === 0) {
            elements.fileList.classList.add('hidden');
            return;
        }
        
        elements.fileList.classList.remove('hidden');
        elements.fileList.innerHTML = state.selectedFiles.map(file => `
            <div class="file-item">
                <svg class="file-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <div class="filter-content">
                    <div class="filter-name">${file.name}</div>
                    <div class="filter-meta">
                        <span class="meta-tag">${formatFileSize(file.size)}</span>
                    </div>
                </div>
            </div>
        `).join('');
    };

    const handleFiles = (files) => {
        const zipFiles = Array.from(files).filter(file => file.name.toLowerCase().endsWith('.zip'));
        if (zipFiles.length === 0) {
            showStatus('Kun ZIP-filer er understøttet', 'error');
            return;
        }
        
        state.selectedFiles = zipFiles;
        updateFileList();
        elements.processBtn.disabled = false;
        showStatus(`${zipFiles.length} ZIP-fil(er) valgt og klar til behandling`, 'success');
    };

    // CSV parsing
    const parseCSV = (content) => {
        try {
            const result = Papa.parse(content, {
                header: true,
                skipEmptyLines: true,
                delimiter: ',',
                quoteChar: '"',
                escapeChar: '"',
                transform: value => typeof value === 'string' ? value.trim() : value,
                transformHeader: header => header.trim(),
            });
            
            if (result.errors && result.errors.length > 0) {
                console.warn('CSV parsing warnings:', result.errors);
            }
            
            return result.data.filter(row =>
                Object.values(row).some(value => value && value.toString().trim().length > 0)
            );
        } catch (error) {
            console.error('CSV parsing error:', error);
            showStatus(`CSV parsing fejl: ${error.message}`, 'error');
            return [];
        }
    };

    // Main processing
    const processZipFiles = async () => {
        try {
            setButtonLoading(elements.processBtn, true);
            showStatus('Læser ZIP-filer...', 'info');
            
            state.processedData = { parents: [], variations: [] };
            state.categories.clear();
            state.products.clear();
            state.selectedCategories.clear();
            state.selectedProducts.clear();
            
            let totalFiles = 0;
            for (const zipFile of state.selectedFiles) {
                const zip = await JSZip.loadAsync(zipFile);
                for (const [path, file] of Object.entries(zip.files)) {
                    if (!path.toLowerCase().endsWith('.csv') || file.dir) continue;
                    
                    totalFiles++;
                    showStatus(`Behandler fil ${totalFiles}: ${path}`, 'info');
                    
                    try {
                        let content;
                        const uint8Array = await file.async('uint8array');
                        
                        // Try UTF-8 first, fallback to Windows-1252
                        try {
                            content = new TextDecoder('utf-8', { fatal: true }).decode(uint8Array);
                        } catch (e) {
                            content = new TextDecoder('windows-1252').decode(uint8Array);
                        }
                        
                        const data = parseCSV(content);
                        if (data.length === 0) {
                            console.warn(`No data found in ${path}`);
                            continue;
                        }
                        
                        // Better parent/variation detection
                        const isParent = path.toLowerCase().includes('parent') || 
                                       data.some(row => !row.parent_sku || row.parent_sku === row.sku);
                        
                        if (isParent) {
                            state.processedData.parents.push(...data);
                        } else {
                            state.processedData.variations.push(...data);
                        }
                    } catch (fileError) {
                        console.error(`Error processing file ${path}:`, fileError);
                        showStatus(`Fejl i fil ${path}: ${fileError.message}`, 'warning');
                    }
                }
            }
            
            if (!state.processedData.parents.length && !state.processedData.variations.length) {
                throw new Error('Ingen gyldige CSV-data fundet i ZIP-filerne');
            }
            
            await processProductData();
            elements.exportSection.classList.remove('hidden');
            showStatus('Filer behandlet succesfuldt! Vælg produkter/kategorier til eksport.', 'success');
            
        } catch (error) {
            console.error('Processing error:', error);
            showStatus(`Fejl: ${error.message}`, 'error');
        } finally {
            setButtonLoading(elements.processBtn, false);
        }
    };

    const processProductData = async () => {
        // Calculate statistics
        state.statistics = {
            parents_total: state.processedData.parents.length,
            variations_total: state.processedData.variations.length,
        };

        // Filter variations to only include those with valid parent SKUs
        const parentSkuSet = new Set(state.processedData.parents.map(p => p.sku?.trim()).filter(Boolean));
        const origVariations = state.processedData.variations.length;
        state.processedData.variations = state.processedData.variations.filter(v => 
            v.parent_sku && parentSkuSet.has(v.parent_sku.trim())
        );
        
        state.statistics.variations_discarded = origVariations - state.processedData.variations.length;
        state.statistics.parents_valid = state.processedData.parents.length;
        state.statistics.variations_valid = state.processedData.variations.length;

        // Process categories
        const categoryData = new Map();
        state.processedData.parents.forEach(p => {
            const catName = (p['tax:product_cat'] || 'Ukategoriseret').trim();
            if (!categoryData.has(catName)) {
                categoryData.set(catName, { name: catName, products: [] });
            }
            categoryData.get(catName).products.push(p);
        });
        state.categories = categoryData;

        // Process products
        state.processedData.parents.forEach(p => {
            const sku = p.sku?.trim();
            if (sku) {
                state.products.set(sku, {
                    sku: sku,
                    name: p.name && p.name.trim() ? p.name.trim() : sku,
                    category: p['tax:product_cat'] || 'Ukategoriseret',
                    price: p.regular_price || p.price || '0',
                    status: p.status || 'publish'
                });
            }
        });

        renderFilters();
        updateStatistics();
        updatePreview();
    };

    // Selection functions
    const getSelectedParents = () => {
        if (state.selectedCategories.size > 0) {
            const selectedCats = Array.from(state.selectedCategories);
            return state.processedData.parents.filter(p => 
                selectedCats.includes(p['tax:product_cat'] || 'Ukategoriseret')
            );
        }
        
        if (state.selectedProducts.size > 0) {
            return state.processedData.parents.filter(p => 
                state.selectedProducts.has(p.sku)
            );
        }
        
        return [];
    };

    const getSelectedVariations = () => {
        const selectedParents = getSelectedParents();
        const parentSkus = new Set(selectedParents.map(p => p.sku));
        return state.processedData.variations.filter(v => parentSkus.has(v.parent_sku));
    };

    // Filtering
    const renderFilters = () => {
        // Categories
        const categorySearchTerm = elements.categorySearch.value.toLowerCase();
        state.filteredCategories = Array.from(state.categories.values()).filter(cat =>
            cat.name.toLowerCase().includes(categorySearchTerm)
        );
        
        elements.categoryList.innerHTML = state.filteredCategories.map(cat =>
            `<div class="filter-item${state.selectedCategories.has(cat.name) ? ' selected' : ''}" data-category="${cat.name}">
                <input type="checkbox" class="filter-checkbox" ${state.selectedCategories.has(cat.name) ? 'checked' : ''}>
                <div class="filter-content">
                    <div class="filter-name">${cat.name}</div>
                    <div class="filter-meta">
                        <span class="meta-tag">${cat.products.length} produkter</span>
                    </div>
                </div>
            </div>`
        ).join('');
        elements.categoryCount.textContent = `${state.selectedCategories.size} valgt`;

        // Products
        const productSearchTerm = elements.productSearch.value.toLowerCase();
        state.filteredProducts = Array.from(state.products.values()).filter(prod =>
            prod.name.toLowerCase().includes(productSearchTerm) || 
            prod.sku.toLowerCase().includes(productSearchTerm)
        );
        
        elements.productList.innerHTML = state.filteredProducts.map(prod =>
            `<div class="filter-item${state.selectedProducts.has(prod.sku) ? ' selected' : ''}" data-sku="${prod.sku}">
                <input type="checkbox" class="filter-checkbox" ${state.selectedProducts.has(prod.sku) ? 'checked' : ''}>
                <div class="filter-content">
                    <div class="filter-name">${prod.name}</div>
                    <div class="filter-meta">
                        <span class="meta-tag">${prod.sku}</span>
                        <span class="meta-tag">${prod.category}</span>
                        <span class="meta-tag">DKK ${parseFloat(prod.price || '0').toFixed(2)}</span>
                    </div>
                </div>
            </div>`
        ).join('');
        elements.productCount.textContent = `${state.selectedProducts.size} valgt`;

        updateStatistics();
        updatePreview();
    };

    // Preview
    const updatePreview = () => {
        const tab = state.activePreviewTab;
        const data = tab === 'parents' ? getSelectedParents() : getSelectedVariations();
        
        if (!data.length) {
            elements.previewHeader.innerHTML = '';
            elements.previewBody.innerHTML = '<tr><td colspan="10" style="text-align:center; padding: 2rem;">Ingen data til forhåndsvisning. Vælg kategorier eller produkter ovenfor.</td></tr>';
            return;
        }
        
        const columns = Object.keys(data[0]);
        elements.previewHeader.innerHTML = '<tr>' + columns.map(h => `<th>${h}</th>`).join('') + '</tr>';
        elements.previewBody.innerHTML = data.slice(0, PREVIEW_LIMIT).map(row =>
            '<tr>' + columns.map(h => `<td title="${row[h] || ''}">${row[h] || ''}</td>`).join('') + '</tr>'
        ).join('');
        
        if (data.length > PREVIEW_LIMIT) {
            elements.previewBody.innerHTML += `<tr><td colspan="${columns.length}" style="text-align:center; font-style: italic; padding: 1rem;">... og ${data.length - PREVIEW_LIMIT} flere rækker</td></tr>`;
        }
    };

    // Event Handlers
    const initEventHandlers = () => {
        // Search handlers
        elements.categorySearch.addEventListener('input', () => {
            renderFilters();
        });

        elements.productSearch.addEventListener('input', () => {
            renderFilters();
        });

        // Bulk action handlers
        document.getElementById('selectAllCategories').addEventListener('click', () => {
            state.filteredCategories.forEach(cat => {
                state.selectedCategories.add(cat.name);
            });
            state.selectedProducts.clear();
            renderFilters();
        });

        document.getElementById('clearAllCategories').addEventListener('click', () => {
            state.selectedCategories.clear();
            renderFilters();
        });

        document.getElementById('selectAllProducts').addEventListener('click', () => {
            state.filteredProducts.forEach(prod => {
                state.selectedProducts.add(prod.sku);
            });
            state.selectedCategories.clear();
            renderFilters();
        });

        document.getElementById('clearAllProducts').addEventListener('click', () => {
            state.selectedProducts.clear();
            renderFilters();
        });

        // Filter selection handlers
        elements.categoryList.addEventListener('click', (e) => {
            const item = e.target.closest('.filter-item');
            if (!item) return;
            
            const cat = item.dataset.category;
            if (state.selectedCategories.has(cat)) {
                state.selectedCategories.delete(cat);
            } else {
                state.selectedCategories.add(cat);
            }
            state.selectedProducts.clear();
            renderFilters();
        });

        elements.productList.addEventListener('click', (e) => {
            const item = e.target.closest('.filter-item');
            if (!item) return;
            
            const sku = item.dataset.sku;
            if (state.selectedProducts.has(sku)) {
                state.selectedProducts.delete(sku);
            } else {
                state.selectedProducts.add(sku);
            }
            state.selectedCategories.clear();
            renderFilters();
        });

        // Tab handlers
        document.querySelectorAll('.preview-tab').forEach(tabBtn => {
            tabBtn.addEventListener('click', () => {
                document.querySelectorAll('.preview-tab').forEach(btn => btn.classList.remove('active'));
                tabBtn.classList.add('active');
                state.activePreviewTab = tabBtn.dataset.tab;
                updatePreview();
            });
        });

        // Upload handlers
        elements.uploadSection.addEventListener('dragover', (e) => {
            e.preventDefault();
            elements.uploadSection.classList.add('dragover');
        });

        elements.uploadSection.addEventListener('dragleave', (e) => {
            if (!elements.uploadSection.contains(e.relatedTarget)) {
                elements.uploadSection.classList.remove('dragover');
            }
        });

        elements.uploadSection.addEventListener('drop', (e) => {
            e.preventDefault();
            elements.uploadSection.classList.remove('dragover');
            handleFiles(e.dataTransfer.files);
        });

        elements.fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        // Button handlers
        elements.processBtn.addEventListener('click', processZipFiles);
        
        elements.exchangeRateInput.addEventListener('input', () => {
            updatePreview();
        });

        // Export handler
        elements.exportBtn.addEventListener('click', async () => {
            const rate = parseFloat(elements.exchangeRateInput.value.replace(',', '.'));
            if (!rate || rate <= 0) {
                showExportStatus('Ugyldig valutakurs', 'error');
                return;
            }

            const parents = getSelectedParents();
            const variations = getSelectedVariations();

            if (!parents.length && !variations.length) {
                showExportStatus('Ingen data valgt til eksport', 'warning');
                return;
            }

            const convertPrice = val => {
                if (!val) return '';
                let num = parseFloat(val.toString().replace(',', '.'));
                return isNaN(num) ? '' : (num * rate).toFixed(2).replace('.', ',');
            };

            const filesToZip = [];
            const addCSVFile = (rows, filename) => {
                if (!rows.length) return;
                
                const fields = Object.keys(rows[0]);
                const data = rows.map(row => {
                    const r = { ...row };
                    PRICE_FIELDS.forEach(f => { 
                        if (f in r) r[f] = convertPrice(r[f]); 
                    });
                    return r;
                });
                
                const csv = Papa.unparse(data, { 
                    columns: fields, 
                    delimiter: ',',
                    quotes: true
                });
                filesToZip.push({ filename, content: csv });
            };

            try {
                elements.exportBtn.disabled = true;
                showExportStatus('Genererer eksportfiler...', 'info');

                if (state.selectedCategories.size) {
                    // Export by category
                    state.selectedCategories.forEach(catName => {
                        const categoryParents = parents.filter(p => 
                            (p['tax:product_cat'] || 'Ukategoriseret') === catName
                        );
                        if (categoryParents.length) {
                            addCSVFile(categoryParents, `parents-${catName.replace(/[^a-zA-Z0-9]/g, '_')}-${timestamp()}.csv`);
                        }
                        
                        const categoryVariations = variations.filter(v => {
                            const parent = state.processedData.parents.find(par => par.sku === v.parent_sku);
                            return parent && (parent['tax:product_cat'] || 'Ukategoriseret') === catName;
                        });
                        if (categoryVariations.length) {
                            addCSVFile(categoryVariations, `variations-${catName.replace(/[^a-zA-Z0-9]/g, '_')}-${timestamp()}.csv`);
                        }
                    });
                } else {
                    // Export selected products
                    if (parents.length) {
                        addCSVFile(parents, `custom-export-parents-${timestamp()}.csv`);
                    }
                    if (variations.length) {
                        addCSVFile(variations, `custom-export-variations-${timestamp()}.csv`);
                    }
                }

                if (!filesToZip.length) {
                    showExportStatus('Ingen data til eksport', 'warning');
                    return;
                }

                showExportStatus('Genererer ZIP-fil...', 'info');
                const zip = new JSZip();
                filesToZip.forEach(f => zip.file(f.filename, f.content));
                
                const blob = await zip.generateAsync({ 
                    type: 'blob',
                    compression: 'DEFLATE',
                    compressionOptions: { level: 6 }
                });
                
                const a = document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = `woocommerce-export-${timestamp()}.zip`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(a.href);
                
                showExportStatus(`ZIP-fil genereret med ${filesToZip.length} CSV-fil(er)`, 'success');
                
            } catch (error) {
                console.error('Export error:', error);
                showExportStatus(`Eksport fejl: ${error.message}`, 'error');
            } finally {
                elements.exportBtn.disabled = false;
            }
        });
    };

    // Initialize the application
    const init = () => {
        showStatus('Upload én eller flere ZIP-filer med WooCommerce CSV-data', 'info');
        initEventHandlers();
    };

    // Start the application when the DOM is ready
    document.addEventListener('DOMContentLoaded', init);
  </script>
  
</body>
</html>